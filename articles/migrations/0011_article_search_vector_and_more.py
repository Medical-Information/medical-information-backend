# Generated by Django 4.2.4 on 2023-08-14 07:07

import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations


def compute_search_vector(apps, schema_editor):
    Article = apps.get_model('articles', 'Article')
    Article.objects.update(
        search_vector=django.contrib.postgres.search.SearchVector('title', 'text'),
    )


class Migration(migrations.Migration):
    dependencies = [
        ('articles', '0010_alter_article_author_alter_viewer_user'),
    ]

    operations = [
        migrations.AddField(
            model_name='article',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AddIndex(
            model_name='article',
            index=django.contrib.postgres.indexes.GinIndex(
                fields=['search_vector'],
                name='articles_ar_search__95c6c6_gin',
            ),
        ),
        migrations.RunSQL(
            sql="""
                CREATE OR REPLACE FUNCTION update_article_search_vector()
                RETURNS TRIGGER
                LANGUAGE plpgsql AS $$
                BEGIN
                SELECT
                setweight(to_tsvector(coalesce(NEW.title, '')), 'A') ||
                setweight(to_tsvector(coalesce(NEW.text, '')), 'B')
                INTO NEW.search_vector;
                RETURN NEW;
                END;
                $$;

                CREATE TRIGGER article_update_trigger
                BEFORE INSERT OR UPDATE OF title, text, search_vector
                ON articles_article
                FOR EACH ROW
                EXECUTE PROCEDURE update_article_search_vector();

                UPDATE articles_article SET search_vector = NULL;
                """,
            reverse_sql="""
                DROP TRIGGER IF EXISTS article_update_trigger ON articles_article;

                DROP FUNCTION IF EXISTS update_article_search_vector();

                UPDATE articles_article SET search_vector = NULL;
                """,
        ),
        migrations.RunPython(
            compute_search_vector,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
