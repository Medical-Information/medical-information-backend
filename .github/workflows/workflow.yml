name: Stethoscope backend

on: [push]

jobs:

  linters:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
        linter: ["flake8", "mypy"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./stethoscope/requirements/dev.txt

    - name: Test with ${{ matrix.linter }}
      run: ${{ matrix.linter }} .

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    services:

      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: stethoscope_db
          POSTGRES_USER: stethoscope_user
          POSTGRES_PASSWORD: stethoscope_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./stethoscope/requirements/tests.txt

    - name: Test with pytest
      run: |
        pytest

  dispatch:
    if: github.ref == 'refs/heads/develop'
    needs: [linters, tests]
    runs-on: ubuntu-latest
    steps:
      - name: Push to repo
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.PAT }}
          repository: "Medical-Information/medical-information-portal"
          event-type: update_remote
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "module": "backend", "branch": "develop"}'

  build_and_push_to_docker_hub:
    name: Build and Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: [linters, tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/stethoscope-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ./stethoscope_infra
            echo DEBUG=${{ vars.DEBUG }} > .env
            echo LOGGING_ENABLED=${{ vars.LOGGING_ENABLED }} > .env
            echo CORS_ALLOW_ALL_ORIGINS=${{ vars.CORS_ALLOW_ALL_ORIGINS }} >> .env
            echo POSTGRES_DB=${{ vars.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ vars.POSTGRES_USER }} >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo POSTGRES_HOST=${{ vars.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ vars.POSTGRES_PORT }} >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ vars.ALLOWED_HOSTS }}" >> .env
            echo "CSRF_TRUSTED_ORIGINS=${{ vars.CSRF_TRUSTED_ORIGINS }}" >> .env
            echo EMAIL_HOST=${{ vars.EMAIL_HOST }} >> .env
            echo EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }} >> .env
            echo DEFAULT_FROM_EMAIL=${{ vars.DEFAULT_FROM_EMAIL }} >> .env
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
            echo EMAIL_PORT=${{ vars.EMAIL_PORT }} >> .env
            echo EMAIL_USE_SSL=${{ vars.EMAIL_USE_SSL }} >> .env
            echo EMAIL_USE_TLS=${{ vars.EMAIL_USE_TLS }} >> .env
            echo CURSOR_PAGINATION_PAGE_SIZE=${{ vars.CURSOR_PAGINATION_PAGE_SIZE }} >> .env
            echo CURSOR_PAGINATION_MAX_PAGE_SIZE=${{ vars.CURSOR_PAGINATION_MAX_PAGE_SIZE }} >> .env
            echo "WEEKLY_SUBJECT=${{ vars.WEEKLY_SUBJECT }}" >> .env
            echo CELERY_BROKER=${{ vars.CELERY_BROKER }} >> .env
            echo URL_ARTICLES=${{ vars.URL_ARTICLES }} >> .env
            echo SITE_NAME=${{ vars.SITE_NAME }} >> .env
            echo DOMAIN=${{ vars.DOMAIN }} >> .env
            echo PASSWORD_RESET_TIMEOUT=${{ vars.PASSWORD_RESET_TIMEOUT }} >> .env
            sudo docker compose down
            sudo docker image rm ${{ vars.DOCKER_USERNAME }}/stethoscope-backend
            sudo docker compose pull
            sudo docker compose up -d
